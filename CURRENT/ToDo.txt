ToDo:

Bugs:

Improvements/Ideas:
DONE  - Change try-catch block in questionAnalysis() so that it doesn't fail if just one thing goes wrong
    > multiple try-catch blocks, one for relation, one for entity, and last for entity2?
  - Change wikiDataQuery() so that it can also search for realtions?
    > make an extra arg that can either be a "Q" or a "P", then directly put that in the re srch string.
  - Change extractRelEnt() to receive a token, and analyse its children for it's context?
  - Create a "Is ENTITY a ENTITY" hardCodings for the relation, so far should contain:
    > [P31 (instance of), P279 (subclass of), P361 (part of), ??]
Need to Fix:
  Question Types:
  DONE  - Did X VERB Y? (Yes/No question.) [Did Newton discover penicillin?]
      > Did X Z Y?
      > Did X Y? Maybe not, I mean how do you find the answer to: Did Neil Armstrong die?
  DONE  - How many Xs VERB Y VERB? (count question) [How many nobel prizes has Marie Curie won?]
  DONE  - When/What/Who/Where did X Y? [When did Neil Armstrong die?]
    DONE  > When : ADV, advmod
    DONE  > What : PRON, dobj
    DONE  > NOT Why.
    DONE  > Who : PRON, dobj
    DONE  > Where : ADV, advmod
    - Qualified statements questions [What is the temperature at THE CENTER of the sun]
    - Biggest/Smallest questions???

Notes:
* Access id of a wikiDataAPI result with entity['id']
* values (the matches to wikiDataAPI) are stored in a dict, so anything about them can be accessed:
      the dict: values = {
                  "relation" : relationAPI,
                  "entity" : entityFinal,
                  "entity2" : entity2API if (entity2API is not None) else None
              }
  fields from wikidataAPI are:
    - id
    - title
    - pageid
    - repository
    - url
    - datatype
    - concepturi
    - label
    - description
    - match : {type
               language
               text}
    - aliases

  fields from wikiDataQuery are:
    - id
    - title
    - url
    - concepturi
* Now using the en_core_web_lg 'large' model

Workflow:
1. values, Qtype = questionAnalysis(line)
  loop:
  2. query, answerSpot = queryType(values, Qtype)
  3. results = runQuery(query, answerSpot)
  4. printAns(results, values, Qtype) (checks if ans is satisfactory)

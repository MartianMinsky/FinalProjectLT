ToDo:

Bugs:

Improvements/Ideas:
DONE  - Change try-catch block in questionAnalysis() so that it doesn't fail if just one thing goes wrong
    > multiple try-catch blocks, one for relation, one for entity, and last for entity2?
  - Change wikiDataQuery() so that it can also search for realtions?
    > make an extra arg that can either be a "Q" or a "P", then directly put that in the re srch string.
  - Change extractRelEnt() to receive a token, and analyse its children for it's context?

Need to Fix:
  - qN is not written to file, when there is an exception.  
  Question Types:
    - Qualified statements questions [What is the temperature at THE CENTER of the sun]
      > Don't know how to access them.
    - Biggest/Smallest questions???
    - Create a "Is ENTITY a ENTITY" hardCodings for the relation, so far should contain:
      > [P31 (instance of), P279 (subclass of), P361 (part of), ??]
    - Bugs from Test questions:
    DONE  1 At what speed does a photon move? > Not Recognised. implemented.
    DONE  2 How big is the Milky Way? > implement. (need to match diameter with size, good luck with that one. counts as done. )
    DONE  4 How many languages did Nikola Tesla speak? > small glitch, both a dobj and an aux.
    \o/  5 Apollo 15 mission problem. > ??? extractRelEnt() is good, but wikidata can't match the 'mission' part.
    WIP  6 Penicilin was discovered by whom? > Need to implement. (shit q btw. )
      9 When was the Doppler effect discovered? > need to implement

Notes:
* Access id of a wikiDataAPI result with entity['id']
* values (the matches to wikiDataAPI) are stored in a dict, so anything about them can be accessed:
      the dict: values = {
                  "relation" : relationAPI,
                  "entity" : entityFinal,
                  "entity2" : entity2API if (entity2API is not None) else None
              }
  fields from wikidataAPI are:
    - id
    - title
    - pageid
    - repository
    - url
    - datatype
    - concepturi
    - label
    - description
    - match : {type
               language
               text}
    - aliases

  fields from wikiDataQuery are:
    - id
    - title
    - url
    - concepturi
* Now using the en_core_web_lg 'large' model

Workflow:
1. values, Qtype = questionAnalysis(line)
  loop:
  2. query, answerSpot = queryType(values, Qtype)
  3. results = runQuery(query, answerSpot)
  4. printAns(results, values, Qtype) (checks if ans is satisfactory)
